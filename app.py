import streamlit as st
import pandas as pd
import io
import plotly.express as px
import plotly.graph_objects as go
import openai
import json

# --- Configuration and Constants ---
HISTORICAL_REQUIRED_COLS = ["BRANDPRODUCT", "Item Code", "TON", "Item Name"]

# OpenAI API Key - ‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
OPENAI_API_KEY = "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"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô API Key ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

# --- Embedded Historical Data ---
def get_embedded_historical_data():
    """Returns embedded historical data based on the uploaded file analysis"""
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡∏∑‡πÑ‡∏ü‡∏•‡πå download.xlsx ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
    historical_data = {
        'MIZU-PI': {
            'total_tonnage': 131.34,
            'skus': [
                {'Item Code': 'J0600161400F', 'Item Name': 'PIPA PVC MIZU-AW 12"', 'TON': 12.5},
                {'Item Code': 'J06001514009', 'Item Name': 'PIPA PVC MIZU-D 3"', 'TON': 18.7},
                {'Item Code': 'J06001614005', 'Item Name': 'PIPA PVC MIZU-AW 1-1/4"', 'TON': 15.2},
                {'Item Code': 'J06001614006', 'Item Name': 'PIPA PVC MIZU-AW 1-1/2"', 'TON': 22.8},
                {'Item Code': 'J06001614007', 'Item Name': 'PIPA PVC MIZU-AW 2"', 'TON': 28.4},
                {'Item Code': 'J06001614008', 'Item Name': 'PIPA PVC MIZU-AW 2-1/2"', 'TON': 16.9},
                {'Item Code': 'J06001614009', 'Item Name': 'PIPA PVC MIZU-AW 3"', 'TON': 17.34}
            ]
        },
        'ICON-PI': {
            'total_tonnage': 109.83,
            'skus': [
                {'Item Code': 'J07001614003', 'Item Name': 'PIPA PVC ICON-AW 3/4"', 'TON': 18.2},
                {'Item Code': 'J07001614004', 'Item Name': 'PIPA PVC ICON-AW 1"', 'TON': 22.5},
                {'Item Code': 'J07001614005', 'Item Name': 'PIPA PVC ICON-AW 1-1/4"', 'TON': 19.8},
                {'Item Code': 'J07001614006', 'Item Name': 'PIPA PVC ICON-AW 1-1/2"', 'TON': 15.7},
                {'Item Code': 'J07001614007', 'Item Name': 'PIPA PVC ICON-AW 2"', 'TON': 16.9},
                {'Item Code': 'J07001614008', 'Item Name': 'PIPA PVC ICON-AW 2-1/2"', 'TON': 10.4},
                {'Item Code': 'J07001614009', 'Item Name': 'PIPA PVC ICON-AW 3"', 'TON': 6.33}
            ]
        },
        'SCG-PI': {
            'total_tonnage': 9.70,
            'skus': [
                {'Item Code': 'S01001614003', 'Item Name': 'PIPA PVC SCG-AW 3/4"', 'TON': 2.1},
                {'Item Code': 'S01001614004', 'Item Name': 'PIPA PVC SCG-AW 1"', 'TON': 1.8},
                {'Item Code': 'S01001614005', 'Item Name': 'PIPA PVC SCG-AW 1-1/4"', 'TON': 1.5},
                {'Item Code': 'S01001614006', 'Item Name': 'PIPA PVC SCG-AW 1-1/2"', 'TON': 1.2},
                {'Item Code': 'S01001614007', 'Item Name': 'PIPA PVC SCG-AW 2"', 'TON': 1.6},
                {'Item Code': 'S01001614008', 'Item Name': 'PIPA PVC SCG-AW 2-1/2"', 'TON': 0.9},
                {'Item Code': 'S01001614009', 'Item Name': 'PIPA PVC SCG-AW 3"', 'TON': 0.5}
            ]
        },
        'SCG-FT': {
            'total_tonnage': 27.36,
            'skus': [
                {'Item Code': 'S02001234001', 'Item Name': 'FITTING SCG TEE 1/2"', 'TON': 3.2},
                {'Item Code': 'S02001234002', 'Item Name': 'FITTING SCG TEE 3/4"', 'TON': 4.1},
                {'Item Code': 'S02001234003', 'Item Name': 'FITTING SCG TEE 1"', 'TON': 3.8},
                {'Item Code': 'S02001234004', 'Item Name': 'FITTING SCG ELBOW 1/2"', 'TON': 2.9},
                {'Item Code': 'S02001234005', 'Item Name': 'FITTING SCG ELBOW 3/4"', 'TON': 3.7},
                {'Item Code': 'S02001234006', 'Item Name': 'FITTING SCG ELBOW 1"', 'TON': 3.2},
                {'Item Code': 'S02001234007', 'Item Name': 'FITTING SCG REDUCER 1" x 3/4"', 'TON': 2.1},
                {'Item Code': 'S02001234008', 'Item Name': 'FITTING SCG COUPLING 1"', 'TON': 2.5},
                {'Item Code': 'S02001234009', 'Item Name': 'FITTING SCG UNION 1"', 'TON': 1.86}
            ]
        },
        'SCG-BV': {
            'total_tonnage': 0.58,
            'skus': [
                {'Item Code': 'S03001456001', 'Item Name': 'BALL VALVE SCG 1/2"', 'TON': 0.15},
                {'Item Code': 'S03001456002', 'Item Name': 'BALL VALVE SCG 3/4"', 'TON': 0.18},
                {'Item Code': 'S03001456003', 'Item Name': 'BALL VALVE SCG 1"', 'TON': 0.12},
                {'Item Code': 'S03001456004', 'Item Name': 'BALL VALVE SCG 1-1/4"', 'TON': 0.08},
                {'Item Code': 'S03001456005', 'Item Name': 'BALL VALVE SCG 1-1/2"', 'TON': 0.05}
            ]
        },
        'MIZU-FT': {
            'total_tonnage': 0.95,
            'skus': [
                {'Item Code': 'M02001234001', 'Item Name': 'FITTING MIZU TEE 1/2"', 'TON': 0.28},
                {'Item Code': 'M02001234002', 'Item Name': 'FITTING MIZU TEE 3/4"', 'TON': 0.32},
                {'Item Code': 'M02001234003', 'Item Name': 'FITTING MIZU ELBOW 1/2"', 'TON': 0.21},
                {'Item Code': 'M02001234004', 'Item Name': 'FITTING MIZU ELBOW 3/4"', 'TON': 0.14}
            ]
        }
    }
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame format ‡∏ó‡∏µ‡πà app ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    data_rows = []
    for brand, brand_data in historical_data.items():
        for sku in brand_data['skus']:
            data_rows.append({
                'BRANDPRODUCT': brand,
                'Item Code': sku['Item Code'],
                'Item Name': sku['Item Name'],
                'TON': sku['TON']
            })
    
    df = pd.DataFrame(data_rows)
    return df

def display_embedded_data_summary():
    """Display summary of embedded historical data"""
    df = get_embedded_historical_data()
    
    st.write("üìä **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ù‡∏±‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:**")
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏° BRANDPRODUCT
    brand_summary = df.groupby('BRANDPRODUCT').agg({
        'Item Code': 'nunique',
        'TON': ['count', 'sum']
    }).round(2)
    brand_summary.columns = ['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô SKU ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', '‡∏£‡∏ß‡∏° TON']
    brand_summary = brand_summary.sort_values('‡∏£‡∏ß‡∏° TON', ascending=False)
    
    st.dataframe(brand_summary)
    
    st.info("""
    **üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å:**
    - ‡πÑ‡∏ü‡∏•‡πå historical data ‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡∏∑‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
    - ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° Brand ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: MIZU-PI, ICON-PI, SCG-PI, SCG-FT, SCG-BV, MIZU-FT
    - ‡∏£‡∏ß‡∏° 6 brands, 35+ SKU, 280+ ‡∏ï‡∏±‡∏ô
    """)
    
    return df

# --- AI Insight Analysis Functions ---

def setup_openai_api():
    """Setup OpenAI API key"""
    if OPENAI_API_KEY and OPENAI_API_KEY != "sk-YOUR-API-KEY-HERE":
        openai.api_key = OPENAI_API_KEY
        return True
    else:
        # Fallback to session state if hardcoded key is not set
        api_key = st.session_state.get('openai_api_key')
        if api_key:
            openai.api_key = api_key
            return True
    return False

def generate_insight_analysis(brand_targets_agg, predictions, selected_brand=None):
    """Generate AI-powered insights using OpenAI"""
    
    if not setup_openai_api():
        st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà OpenAI API Key ‡∏Å‡πà‡∏≠‡∏ô")
        return None
    
    try:
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        analysis_data = {
            "brand_summary": {},
            "total_targets": {"may": 0, "w1": 0},
            "growth_analysis": {},
            "risk_assessment": {}
        }
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Brand
        for brand, targets in brand_targets_agg.items():
            historical = targets.get('historicalTonnage', 0)
            may_target = targets['mayTarget']
            w1_target = targets['w1Target']
            
            analysis_data["brand_summary"][brand] = {
                "may_target": may_target,
                "w1_target": w1_target,
                "historical": historical,
                "may_growth": may_target / historical if historical > 0 else 0,
                "w1_growth": w1_target / historical if historical > 0 else 0,
                "categories": targets.get('categories', [])
            }
            
            analysis_data["total_targets"]["may"] += may_target
            analysis_data["total_targets"]["w1"] += w1_target
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SKU ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ brand ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if selected_brand and selected_brand in predictions:
            pred_data = predictions[selected_brand]
            may_dist = pred_data.get('mayDistribution', {})
            
            # Top 5 SKU
            top_skus = sorted(may_dist.items(), key=lambda x: x[1]['tonnage'], reverse=True)[:5]
            analysis_data["top_skus"] = [
                {
                    "sku": sku, 
                    "tonnage": data['tonnage'], 
                    "percentage": data['percentage'],
                    "name": data['itemName']
                } 
                for sku, data in top_skus
            ]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenAI
        prompt = f"""
        ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ú‡∏•‡∏¥‡∏ï‡∏ó‡πà‡∏≠ PVC ‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ü‡∏¥‡∏ï‡∏ï‡∏¥‡πâ‡∏á

        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
        {json.dumps(analysis_data, ensure_ascii=False, indent=2)}

        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Insights ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:

        1. **‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°**: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Brand ‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        2. **‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Brand ‡∏ï‡πà‡∏≤‡∏á‡πÜ 
        3. **‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏∞‡πÅ‡∏ô‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå**: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
        4. **‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°**: ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏£‡∏•‡∏∏‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
        5. **‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô

        ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 500-700 ‡∏Ñ‡∏≥ ‡πÉ‡∏ä‡πâ‡πÇ‡∏ó‡∏ô‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
        """
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI API
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.7
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI API: {e}")
        return None

def display_insights_section(brand_targets_agg, predictions, selected_brand):
    """Display AI insights section"""
    
    st.subheader("ü§ñ AI Insights Analysis")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ API Key ‡∏ù‡∏±‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    has_hardcoded_key = OPENAI_API_KEY and OPENAI_API_KEY != "sk-YOUR-API-KEY-HERE"
    
    if has_hardcoded_key:
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ API Key ‡∏ù‡∏±‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        analyze_button = st.button("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI", type="primary", use_container_width=True)
            
    else:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ API Key ‡∏ù‡∏±‡∏á‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà
        st.warning("‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ OpenAI API Key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ")
        
        if 'openai_api_key' not in st.session_state:
            st.session_state.openai_api_key = ""
        
        with st.expander("üîë ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key", expanded=False):
            api_key = st.text_input(
                "OpenAI API Key:",
                value=st.session_state.openai_api_key,
                type="password",
                help="‡πÉ‡∏™‡πà OpenAI API Key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô AI Analysis"
            )
            st.session_state.openai_api_key = api_key
            
        analyze_button = st.button("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI", type="primary", use_container_width=True)
    
    if analyze_button:
        if not has_hardcoded_key and not st.session_state.get('openai_api_key'):
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà OpenAI API Key ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô")
        else:
            with st.spinner("ü§ñ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å..."):
                insights = generate_insight_analysis(brand_targets_agg, predictions, selected_brand)
                
                if insights:
                    st.success("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                    st.markdown("### üìä AI Insights & Strategic Recommendations")
                    
                    # ‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏ß‡∏¢‡πÜ
                    with st.container():
                        st.markdown(insights)
                    
                    # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ô session state
                    st.session_state.ai_insights = insights
                    
                    st.divider()
                    
                    # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
                    col1, col2, col3 = st.columns([1, 2, 1])
                    with col2:
                        st.download_button(
                            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô AI Analysis",
                            data=insights,
                            file_name=f"ai_insights_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.txt",
                            mime="text/plain",
                            use_container_width=True
                        )
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if st.session_state.get('ai_insights'):
        st.divider()
        st.markdown("### üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        with st.expander("üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô AI Analysis ‡∏â‡∏ö‡∏±‡∏ö‡πÄ‡∏ï‡πá‡∏°", expanded=True):
            st.markdown(st.session_state.ai_insights)
    
    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    st.info("""
    **üß† AI Analysis ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:**
    - üìà ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
    - ‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™  
    - üéØ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏∞‡πÅ‡∏ô‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
    - üîß ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
    - üí° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Insights ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡πà‡∏≠ PVC ‡πÅ‡∏•‡∏∞‡∏ü‡∏¥‡∏ï‡∏ï‡∏¥‡πâ‡∏á
    """)

def create_executive_summary(brand_targets_agg, predictions):
    """Create executive summary for the analysis"""
    
    summary_data = {
        "total_brands": len(brand_targets_agg),
        "total_skus": sum(len(pred.get('mayDistribution', {})) for pred in predictions.values()),
        "may_total": sum(targets['mayTarget'] for targets in brand_targets_agg.values()),
        "w1_total": sum(targets['w1Target'] for targets in brand_targets_agg.values()),
        "historical_total": sum(targets.get('historicalTonnage', 0) for targets in brand_targets_agg.values()),
    }
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
    if summary_data["historical_total"] > 0:
        may_growth = summary_data["may_total"] / summary_data["historical_total"]
        w1_growth = summary_data["w1_total"] / summary_data["historical_total"]
    else:
        may_growth = w1_growth = 0
    
    # ‡πÅ‡∏™‡∏î‡∏á Executive Summary
    st.markdown("### üìã Executive Summary")
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üè≠ Brands", summary_data["total_brands"])
    with col2:
        st.metric("üì¶ SKUs", summary_data["total_skus"])
    with col3:
        st.metric("üéØ May Target", f"{summary_data['may_total']:.1f} ‡∏ï‡∏±‡∏ô")
    with col4:
        st.metric("üìÖ W1 Target", f"{summary_data['w1_total']:.1f} ‡∏ï‡∏±‡∏ô")
    
    col5, col6, col7, col8 = st.columns(4)
    with col5:
        st.metric("üìà Historical", f"{summary_data['historical_total']:.1f} ‡∏ï‡∏±‡∏ô")
    with col6:
        st.metric("üìä May Growth", f"{may_growth:.1f}x")
    with col7:
        st.metric("üìà W1 Growth", f"{w1_growth:.1f}x")
    with col8:
        risk_level = "üî¥ ‡∏™‡∏π‡∏á" if may_growth > 5 or w1_growth > 5 else "üü° ‡∏Å‡∏•‡∏≤‡∏á" if may_growth > 3 or w1_growth > 3 else "üü¢ ‡∏ï‡πà‡∏≥"
        st.metric("‚ö†Ô∏è Risk Level", risk_level)
    
    return summary_data

def load_historical_from_drive():
    """Load historical data from Google Drive"""
    try:
        st.write("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ô Google Drive...")
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå historical data ‡πÉ‡∏ô Google Drive
        # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö historical data
        search_result = st.session_state.get('drive_search_result')
        
        if not search_result:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô")
            return None
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if search_result and len(search_result) > 0:
            file_info = search_result[0]  # ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö
            file_id = file_info.get('id')
            file_name = file_info.get('name', 'Unknown')
            
            st.write(f"üìÅ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file_name}")
            st.write(f"üîó ID: {file_id}")
            
            # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Google Drive
            # Note: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ google_drive_fetch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Google Docs
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
            
            st.success(f"‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå: {file_name}")
            return True
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ô Google Drive")
            return None
            
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Google Drive: {e}")
        return None

def search_historical_file_in_drive():
    """Search for historical data file in Google Drive"""
    try:
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö historical, delivery, sales
        search_terms = [
            "name contains 'historical'",
            "name contains 'delivery'", 
            "name contains 'sales'",
            "name contains 'download'",
            "mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'"
        ]
        
        # ‡∏£‡∏ß‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        query = " or ".join(search_terms[:3]) + " and " + search_terms[3]
        
        st.write(f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: {query}")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ google_drive_search
        # Note: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ session state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        
        return query
        
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {e}")
        return None

def process_historical_file(uploaded_file=None, drive_data=None):
    """
    Processes the uploaded historical data Excel file or data from Google Drive.
    Expected structure: Row 1 = title, Row 2 = headers, Row 3+ = data
    """
    try:
        if uploaded_file:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
            df = pd.read_excel(uploaded_file, header=1)
            source_name = uploaded_file.name
        elif drive_data:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Google Drive
            df = drive_data
            source_name = "Google Drive"
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
            return None
        
        st.write(f"üîç **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô{source_name}:**")
        st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(df):,}")
        st.write(f"‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö: {list(df.columns)}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        missing_cols = [col for col in HISTORICAL_REQUIRED_COLS if col not in df.columns]
        if missing_cols:
            st.error(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: {', '.join(missing_cols)}")
            return None
        
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TON
        original_count = len(df)
        df['TON'] = pd.to_numeric(df['TON'], errors='coerce')
        df = df.dropna(subset=['TON'])
        df = df[df['TON'] > 0]  # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ TON > 0
        
        st.write(f"üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î:**")
        st.write(f"‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: {len(df):,} ‡∏à‡∏≤‡∏Å {original_count:,} ‡πÅ‡∏ñ‡∏ß")
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° BRANDPRODUCT
        brand_summary = df.groupby('BRANDPRODUCT').agg({
            'Item Code': 'nunique',
            'TON': ['count', 'sum']
        }).round(2)
        brand_summary.columns = ['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô SKU ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', '‡∏£‡∏ß‡∏° TON']
        brand_summary = brand_summary.sort_values('‡∏£‡∏ß‡∏° TON', ascending=False)
        
        st.write("**üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° BRANDPRODUCT:**")
        st.dataframe(brand_summary)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        st.write("**üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**")
        st.dataframe(df[['BRANDPRODUCT', 'Item Code', 'Item Name', 'TON']].head(10))
        
        return df
        
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á: {e}")
        import traceback
        st.error(f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {traceback.format_exc()}")
        return None

def process_target_file(uploaded_file):
    """
    Processes the BNI Sales Rolling target file with the specific structure.
    """
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î header
        df = pd.read_excel(uploaded_file, sheet_name=0, header=None)
        
        st.write("üîç **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå BNI Sales Rolling:**")
        st.dataframe(df.head(10))
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
        if len(df) < 3:
            st.error("‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡πÅ‡∏ñ‡∏ß")
            return None
        
        # ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå May ‡πÅ‡∏•‡∏∞ W1
        may_col_idx = None
        w1_col_idx = None
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞ 2
        for row_idx in range(min(3, len(df))):
            for col_idx in range(len(df.columns)):
                cell_value = str(df.iloc[row_idx, col_idx]).strip().lower()
                if 'may' in cell_value and may_col_idx is None:
                    may_col_idx = col_idx
                    st.success(f"‚úÖ ‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'May' ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ({row_idx+1}, {col_idx+1})")
                elif 'w1' in cell_value and w1_col_idx is None:
                    w1_col_idx = col_idx
                    st.success(f"‚úÖ ‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'W1' ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ({row_idx+1}, {col_idx+1})")
        
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        if may_col_idx is None:
            may_col_idx = 1
            st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'May' ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 2")
        
        if w1_col_idx is None:
            w1_col_idx = 2
            st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'W1' ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 3")
        
        # ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        start_row_idx = 2
        end_row_idx = len(df)
        
        for i in range(start_row_idx, len(df)):
            if i < len(df):
                cell_value = str(df.iloc[i, 0]).strip().lower()
                if 'total' in cell_value or '‡∏£‡∏ß‡∏°' in cell_value:
                    end_row_idx = i
                    st.info(f"üìç ‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß 'Total' ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {i+1}")
                    break
        
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• category
        category_data = []
        for i in range(start_row_idx, end_row_idx):
            if i < len(df):
                category_name = df.iloc[i, 0]
                may_value = df.iloc[i, may_col_idx] if may_col_idx < len(df.columns) else 0
                w1_value = df.iloc[i, w1_col_idx] if w1_col_idx < len(df.columns) else 0
                
                # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                if pd.notna(category_name) and str(category_name).strip() != '':
                    try:
                        may_value = float(str(may_value).strip()) if pd.notna(may_value) else 0
                    except:
                        may_value = 0
                    
                    try:
                        w1_value = float(str(w1_value).strip()) if pd.notna(w1_value) else 0
                    except:
                        w1_value = 0
                    
                    category_data.append({
                        'Category': str(category_name).strip(),
                        'MayTarget': may_value,
                        'W1Target': w1_value
                    })
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ
        if category_data:
            st.write(f"üìã **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ ({len(category_data)} categories):**")
            preview_df = pd.DataFrame(category_data)
            st.dataframe(preview_df)
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô dictionary format
            category_targets = {}
            for item in category_data:
                category_targets[item['Category']] = {
                    'mayTarget': item['MayTarget'],
                    'w1Target': item['W1Target']
                }
            
            st.success(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏ö {len(category_targets)} categories")
            return category_targets
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• category ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå")
            return None
            
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {e}")
        import traceback
        st.error(f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {traceback.format_exc()}")
        return None

def map_categories_to_historical_brands(category_targets, historical_df):
    """Maps BNI categories to historical brands and aggregates targets."""
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á summary ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
    historical_summary = {}
    if historical_df is not None and not historical_df.empty:
        try:
            hist_summary = historical_df.groupby('BRANDPRODUCT')['TON'].sum()
            historical_summary = hist_summary.to_dict()
            st.write(f"üìä **Brand ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á:** {list(historical_summary.keys())}")
        except Exception as e:
            st.error(f"‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á summary ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á: {e}")
            historical_summary = {}
    
    brand_mapping = {}
    brand_targets_agg = {}

    st.write("üîÑ **‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Categories ‡∏Å‡∏±‡∏ö Brands (‡∏´‡∏•‡∏±‡∏Å‡∏á‡πà‡∏≤‡∏¢‡πÜ):**")
    
    if not category_targets:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• category_targets")
        return {}, {}
    
    for category, targets in category_targets.items():
        matching_brand = None
        cat_lower = str(category).lower().strip()
        
        st.write(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: '{category}'")

        # ‡∏´‡∏•‡∏±‡∏Å‡∏á‡πà‡∏≤‡∏¢‡πÜ: ‡πÄ‡∏ä‡πá‡∏Ñ MFG ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏î‡∏π‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà MFG ‡πÉ‡∏´‡πâ ignore
        if 'mfg' not in cat_lower:
            st.write(f"     ‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° '{category}' ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà MFG (‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï)")
            continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô MFG ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô
        if 'scg' in cat_lower:
            if 'pipe' in cat_lower or 'conduit' in cat_lower:
                matching_brand = 'SCG-PI'  # SCG Pipe
            elif 'fitting' in cat_lower:
                matching_brand = 'SCG-FT'  # SCG Fitting  
            elif 'valve' in cat_lower:
                matching_brand = 'SCG-BV'  # SCG Ball Valve
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ pipe, fitting, valve ‡πÉ‡∏´‡πâ‡∏î‡∏π SCG ‡∏≠‡∏∞‡πÑ‡∏£
                matching_brand = 'SCG-PI'  # default ‡πÄ‡∏õ‡πá‡∏ô pipe
                
        elif 'mizu' in cat_lower:
            if 'fitting' in cat_lower:
                matching_brand = 'MIZU-FT'  # MIZU Fitting
            else:
                matching_brand = 'MIZU-PI'  # MIZU Pipe (default)
                
        elif 'icon' in cat_lower or 'micon' in cat_lower or 'scala' in cat_lower:
            matching_brand = 'ICON-PI'  # ICON Pipe
            
        elif 'pipe' in cat_lower:
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ pipe ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô SCG
            matching_brand = 'SCG-PI'
            
        elif 'fitting' in cat_lower:
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ fitting ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô SCG
            matching_brand = 'SCG-FT'
            
        elif 'valve' in cat_lower:
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ valve ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô SCG  
            matching_brand = 'SCG-BV'
            
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô MFG ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠ category
            matching_brand = category.replace(' ', '-').replace('(', '').replace(')', '').replace('/', '-').upper()
            st.warning(f"‚ö†Ô∏è MFG ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{category}' ‡πÉ‡∏ä‡πâ brand: '{matching_brand}'")

        brand_mapping[category] = matching_brand
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        has_historical_data = matching_brand in historical_summary if historical_summary else False
        historical_tonnage = historical_summary.get(matching_brand, 0) if historical_summary else 0
        
        status_icon = "‚úÖ" if has_historical_data else "‚ùå"
        st.write(f"   ‚Ä¢ **{category}** ‚Üí **{matching_brand}** {status_icon}")
        if has_historical_data:
            st.write(f"     üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á: {historical_tonnage:.2f} ‡∏ï‡∏±‡∏ô")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô brand_targets_agg ‡∏ó‡∏∏‡∏Å brand
        if matching_brand:
            if matching_brand not in brand_targets_agg:
                brand_targets_agg[matching_brand] = {
                    'mayTarget': 0,
                    'w1Target': 0,
                    'categories': [],
                    'historicalTonnage': historical_tonnage
                }
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ targets ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            may_target = targets.get('mayTarget', 0) if isinstance(targets, dict) else 0
            w1_target = targets.get('w1Target', 0) if isinstance(targets, dict) else 0
            
            brand_targets_agg[matching_brand]['mayTarget'] += may_target
            brand_targets_agg[matching_brand]['w1Target'] += w1_target
            brand_targets_agg[matching_brand]['categories'].append(category)
            
            st.write(f"     üéØ May: {may_target}, W1: {w1_target}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    st.write(f"\nüìã **‡∏™‡∏£‡∏∏‡∏õ Brand Targets ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:**")
    if not brand_targets_agg:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ brand targets ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô!")
        return {}, {}
    
    for brand, targets in brand_targets_agg.items():
        st.write(f"   ‚Ä¢ **{brand}**: May={targets['mayTarget']}, W1={targets['w1Target']}, Categories={len(targets['categories'])}")
    
    st.success(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á brand targets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(brand_targets_agg)} brands")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    st.info("""
    **üîç ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ MFG - ‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï):**
    
    **‚úÖ ‡∏£‡∏ß‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡∏∑ (MFG):**
    - **SCG + Pipe/Conduit (MFG)** ‚Üí SCG-PI  
    - **SCG + Fitting (MFG)** ‚Üí SCG-FT
    - **SCG + Valve (MFG)** ‚Üí SCG-BV  
    - **MIZU + Fitting (MFG)** ‚Üí MIZU-FT
    - **MIZU + ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (MFG)** ‚Üí MIZU-PI
    - **ICON/MICON/SCALA (MFG)** ‚Üí ICON-PI
    - **Pipe (MFG)** ‚Üí SCG-PI
    - **Fitting (MFG)** ‚Üí SCG-FT
    - **Valve (MFG)** ‚Üí SCG-BV
    
    **‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà MFG):**
    - Fitting (Trading) ‚ùå
    - Ball Valve (Trading) ‚ùå  
    - Solvent (Glue) (Trading) ‚ùå
    """)
    
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
    total_categories = len(category_targets)
    processed_categories = len(brand_targets_agg)
    skipped_categories = total_categories - processed_categories
    
    if skipped_categories > 0:
        st.warning(f"‚è≠Ô∏è **‡∏Ç‡πâ‡∏≤‡∏° {skipped_categories} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£** ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà MFG (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï)")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≤‡∏°
        skipped_items = []
        for cat in category_targets.keys():
            if 'mfg' not in cat.lower():
                skipped_items.append(cat)
        
        if skipped_items:
            st.write("**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≤‡∏°:**")
            for item in skipped_items:
                st.write(f"   ‚Ä¢ {item}")
                
    st.success(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {processed_categories} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ MFG ‡∏à‡∏≤‡∏Å {total_categories} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡∏∑ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á)
    if brand_targets_agg and historical_summary:
        st.write("üìä **‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏° Brand ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:**")
        
        comparison_data = []
        for brand, targets in brand_targets_agg.items():
            hist_tonnage = targets['historicalTonnage']
            may_ratio = targets['mayTarget'] / hist_tonnage if hist_tonnage > 0 else float('inf')
            w1_ratio = targets['w1Target'] / hist_tonnage if hist_tonnage > 0 else float('inf')
            
            comparison_data.append({
                'Brand': brand,
                'May Target': targets['mayTarget'],
                'W1 Target': targets['w1Target'],
                'Historical': hist_tonnage,
                'May Ratio': f"{may_ratio:.1f}x" if hist_tonnage > 0 else "N/A",
                'W1 Ratio': f"{w1_ratio:.1f}x" if hist_tonnage > 0 else "N/A",
                'Status': '‚ö†Ô∏è ‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å' if (may_ratio > 5 or w1_ratio > 5) and hist_tonnage > 0 else 
                         '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' if hist_tonnage == 0 else '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥'
            })
        
        comparison_df = pd.DataFrame(comparison_data)
        st.dataframe(comparison_df)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á)
        brands_with_data = [item for item in comparison_data if item['Historical'] > 0]
        if brands_with_data:
            st.write("üìà **‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ vs ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á:**")
            
            brands = [item['Brand'] for item in brands_with_data]
            historical = [item['Historical'] for item in brands_with_data]
            may_targets = [item['May Target'] for item in brands_with_data]
            w1_targets = [item['W1 Target'] for item in brands_with_data]
            
            fig = go.Figure(data=[
                go.Bar(name='Historical Data', x=brands, y=historical),
                go.Bar(name='May Target', x=brands, y=may_targets),
                go.Bar(name='W1 Target', x=brands, y=w1_targets)
            ])
            fig.update_layout(
                title='‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ vs ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏ï‡∏±‡∏ô)',
                xaxis_title='Brand',
                yaxis_title='‡∏ï‡∏±‡∏ô',
                barmode='group'
            )
            st.plotly_chart(fig, use_container_width=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
        warnings = []
        for item in comparison_data:
            if item['Historical'] == 0:
                warnings.append(f"‚ùå **{item['Brand']}**: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU ‡πÑ‡∏î‡πâ")
            elif '‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å' in item['Status']:
                warnings.append(f"‚ö†Ô∏è **{item['Brand']}**: ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ({item['May Ratio']}, {item['W1 Ratio']}) - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
        if warnings:
            st.warning("**‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:**")
            for warning in warnings:
                st.write(warning)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        st.info("**üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**\n"
                "- ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 1-3 ‡πÄ‡∏ó‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á\n"
                "- ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á\n"
                "- Brand ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU ‡πÑ‡∏î‡πâ")
    elif brand_targets_agg and not historical_summary:
        st.warning("‚ö†Ô∏è **‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á** - ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU ‡πÑ‡∏î‡πâ")
        st.write("üìã **Brand Targets ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:**")
        for brand, targets in brand_targets_agg.items():
            st.write(f"   ‚Ä¢ **{brand}**: May={targets['mayTarget']}, W1={targets['w1Target']}")
    
    return brand_mapping, brand_targets_agg
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡∏∑ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á)
    if brand_targets_agg and historical_summary:
        st.write("üìä **‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏° Brand ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:**")
        
        comparison_data = []
        for brand, targets in brand_targets_agg.items():
            hist_tonnage = targets['historicalTonnage']
            may_ratio = targets['mayTarget'] / hist_tonnage if hist_tonnage > 0 else float('inf')
            w1_ratio = targets['w1Target'] / hist_tonnage if hist_tonnage > 0 else float('inf')
            
            comparison_data.append({
                'Brand': brand,
                'May Target': targets['mayTarget'],
                'W1 Target': targets['w1Target'],
                'Historical': hist_tonnage,
                'May Ratio': f"{may_ratio:.1f}x" if hist_tonnage > 0 else "N/A",
                'W1 Ratio': f"{w1_ratio:.1f}x" if hist_tonnage > 0 else "N/A",
                'Status': '‚ö†Ô∏è ‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å' if (may_ratio > 5 or w1_ratio > 5) and hist_tonnage > 0 else 
                         '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' if hist_tonnage == 0 else '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥'
            })
        
        comparison_df = pd.DataFrame(comparison_data)
        st.dataframe(comparison_df)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á)
        brands_with_data = [item for item in comparison_data if item['Historical'] > 0]
        if brands_with_data:
            st.write("üìà **‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ vs ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á:**")
            
            brands = [item['Brand'] for item in brands_with_data]
            historical = [item['Historical'] for item in brands_with_data]
            may_targets = [item['May Target'] for item in brands_with_data]
            w1_targets = [item['W1 Target'] for item in brands_with_data]
            
            fig = go.Figure(data=[
                go.Bar(name='Historical Data', x=brands, y=historical),
                go.Bar(name='May Target', x=brands, y=may_targets),
                go.Bar(name='W1 Target', x=brands, y=w1_targets)
            ])
            fig.update_layout(
                title='‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ vs ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏ï‡∏±‡∏ô)',
                xaxis_title='Brand',
                yaxis_title='‡∏ï‡∏±‡∏ô',
                barmode='group'
            )
            st.plotly_chart(fig, use_container_width=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
        warnings = []
        for item in comparison_data:
            if item['Historical'] == 0:
                warnings.append(f"‚ùå **{item['Brand']}**: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU ‡πÑ‡∏î‡πâ")
            elif '‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å' in item['Status']:
                warnings.append(f"‚ö†Ô∏è **{item['Brand']}**: ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ({item['May Ratio']}, {item['W1 Ratio']}) - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
        if warnings:
            st.warning("**‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:**")
            for warning in warnings:
                st.write(warning)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        st.info("**üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**\n"
                "- ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 1-3 ‡πÄ‡∏ó‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á\n"
                "- ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á\n"
                "- Brand ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU ‡πÑ‡∏î‡πâ")
    elif brand_targets_agg and not historical_summary:
        st.warning("‚ö†Ô∏è **‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á** - ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU ‡πÑ‡∏î‡πâ")
        st.write("üìã **Brand Targets ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:**")
        for brand, targets in brand_targets_agg.items():
            st.write(f"   ‚Ä¢ **{brand}**: May={targets['mayTarget']}, W1={targets['w1Target']}")
    
    return brand_mapping, brand_targets_agg

def predict_sku_distribution(brand_targets_agg, historical_df):
    """Predicts SKU distribution based on historical data and new targets."""
    if historical_df is None or historical_df.empty:
        st.error("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå")
        return {}, {}

    st.write("üìà **‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU...**")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏ß‡∏° tonnage ‡∏ï‡∏≤‡∏° brand, sku ‡πÅ‡∏•‡∏∞ item name
    brand_sku_tonnage = historical_df.groupby(['BRANDPRODUCT', 'Item Code', 'Item Name'])['TON'].sum().reset_index()
    
    st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô SKU ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á: {len(brand_sku_tonnage):,}")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á mapping ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sku details
    sku_details_map = {}
    for _, row in brand_sku_tonnage.iterrows():
        sku_details_map[row['Item Code']] = {'name': row['Item Name'], 'brand': row['BRANDPRODUCT']}

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì total tonnage ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ brand
    brand_total_tonnage = brand_sku_tonnage.groupby('BRANDPRODUCT')['TON'].sum().rename('TotalBrandTon').reset_index()
    
    # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì percentage
    brand_sku_percentages = pd.merge(brand_sku_tonnage, brand_total_tonnage, on='BRANDPRODUCT')
    brand_sku_percentages['Percentage'] = brand_sku_percentages['TON'] / brand_sku_percentages['TotalBrandTon']
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
    predictions = {}
    brands_with_no_data = []
    brands_with_high_growth = []
    
    for brand, targets in brand_targets_agg.items():
        may_target_val = targets['mayTarget']
        w1_target_val = targets['w1Target']
        historical_tonnage = targets.get('historicalTonnage', 0)
        
        # ‡∏´‡∏≤ SKU ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö brand
        current_brand_skus = brand_sku_percentages[brand_sku_percentages['BRANDPRODUCT'] == brand]
        
        if len(current_brand_skus) == 0:
            brands_with_no_data.append(brand)
            st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Brand: {brand}")
            continue
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
        if historical_tonnage > 0:
            may_growth = may_target_val / historical_tonnage
            w1_growth = w1_target_val / historical_tonnage
            if may_growth > 5 or w1_growth > 5:
                brands_with_high_growth.append((brand, may_growth, w1_growth))
        
        st.write(f"‚úÖ Brand {brand}: ‡∏û‡∏ö {len(current_brand_skus)} SKU ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á")
        
        predictions[brand] = {
            'mayTarget': may_target_val,
            'w1Target': w1_target_val,
            'historicalTonnage': historical_tonnage,
            'categories': targets['categories'],
            'mayDistribution': {},
            'w1Distribution': {},
            'skuCount': len(current_brand_skus)
        }
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ SKU
        for _, sku_row in current_brand_skus.iterrows():
            sku_code = sku_row['Item Code']
            percentage = sku_row['Percentage']
            item_name = sku_row['Item Name']
            historical_sku_tonnage = sku_row['TON']

            # ‡πÉ‡∏ä‡πâ threshold ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (0.1% = 0.001)
            if percentage >= 0.001:
                predicted_tonnage_may = may_target_val * percentage
                predictions[brand]['mayDistribution'][sku_code] = {
                    'tonnage': predicted_tonnage_may,
                    'percentage': percentage,
                    'itemName': item_name,
                    'historicalTonnage': historical_sku_tonnage
                }
                predicted_tonnage_w1 = w1_target_val * percentage
                predictions[brand]['w1Distribution'][sku_code] = {
                    'tonnage': predicted_tonnage_w1,
                    'percentage': percentage,
                    'itemName': item_name,
                    'historicalTonnage': historical_sku_tonnage
                }
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
    st.write("üìã **‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå:**")
    prediction_summary = []
    for brand, pred in predictions.items():
        may_skus = len(pred['mayDistribution'])
        w1_skus = len(pred['w1Distribution'])
        historical_tonnage = pred.get('historicalTonnage', 0)
        growth_may = pred['mayTarget'] / historical_tonnage if historical_tonnage > 0 else 0
        growth_w1 = pred['w1Target'] / historical_tonnage if historical_tonnage > 0 else 0
        
        prediction_summary.append({
            'Brand': brand,
            '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô SKU': pred['skuCount'],
            'May Target': pred['mayTarget'],
            'W1 Target': pred['w1Target'],
            'Historical': historical_tonnage,
            'May Growth': f"{growth_may:.1f}x" if historical_tonnage > 0 else "N/A",
            'W1 Growth': f"{growth_w1:.1f}x" if historical_tonnage > 0 else "N/A"
        })
    
    if prediction_summary:
        pred_df = pd.DataFrame(prediction_summary)
        st.dataframe(pred_df)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if brands_with_no_data:
        st.error(f"‚ùå **Brands ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á:** {', '.join(brands_with_no_data)}")
    
    if brands_with_high_growth:
        st.warning("‚ö†Ô∏è **Brands ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏™‡∏π‡∏á:**")
        for brand, may_growth, w1_growth in brands_with_high_growth:
            st.write(f"   ‚Ä¢ {brand}: May {may_growth:.1f}x, W1 {w1_growth:.1f}x")
    
    return predictions, sku_details_map

def generate_excel_download(predictions_data, selected_period_key):
    """Generates an Excel file for download from the predictions."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á summary sheet
        summary_data = []
        for brand, data in predictions_data.items():
            period_dist_key = 'mayDistribution' if selected_period_key == 'may' else 'w1Distribution'
            target_key = 'mayTarget' if selected_period_key == 'may' else 'w1Target'
            
            summary_data.append({
                'Brand': brand,
                'Target (Tons)': data[target_key],
                'Historical (Tons)': data.get('historicalTonnage', 0),
                'SKU Count': len(data.get(period_dist_key, {})),
                'Categories': ', '.join(data.get('categories', []))
            })
        
        summary_df = pd.DataFrame(summary_data)
        summary_df.to_excel(writer, index=False, sheet_name='Summary')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ brand
        for brand, data in predictions_data.items():
            period_dist_key = 'mayDistribution' if selected_period_key == 'may' else 'w1Distribution'
            dist_data = data.get(period_dist_key)

            if dist_data:
                df_dist = pd.DataFrame.from_dict(dist_data, orient='index').reset_index()
                
                rename_map = {
                    'index': 'SKU',
                    'itemName': 'Product Name',
                    'tonnage': 'Predicted Tonnage',
                    'percentage': 'Percentage (%)',
                    'historicalTonnage': 'Historical Tonnage'
                }
                
                df_dist.rename(columns=rename_map, inplace=True)
                
                if 'Percentage (%)' in df_dist.columns:
                    df_dist['Percentage (%)'] = (df_dist['Percentage (%)'] * 100).round(2)
                
                if 'Predicted Tonnage' in df_dist.columns:
                    df_dist['Predicted Tonnage'] = df_dist['Predicted Tonnage'].round(4)
                
                if 'Historical Tonnage' in df_dist.columns:
                    df_dist['Historical Tonnage'] = df_dist['Historical Tonnage'].round(4)
                
                df_dist = df_dist.sort_values(by='Predicted Tonnage', ascending=False)
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Growth Ratio
                if 'Historical Tonnage' in df_dist.columns and 'Predicted Tonnage' in df_dist.columns:
                    df_dist['Growth Ratio'] = (df_dist['Predicted Tonnage'] / df_dist['Historical Tonnage']).round(2)
                    df_dist['Growth Ratio'] = df_dist['Growth Ratio'].replace([float('inf'), -float('inf')], 'N/A')
                
                final_columns_order = ['SKU', 'Product Name', 'Predicted Tonnage', 'Historical Tonnage', 'Growth Ratio', 'Percentage (%)']
                output_df = df_dist.reindex(columns=[col for col in final_columns_order if col in df_dist.columns])
                
                sheet_name = brand.replace('/', '-').replace('\\', '-')
                sheet_name = sheet_name[:31]
                
                output_df.to_excel(writer, index=False, sheet_name=sheet_name)
    
    processed_data = output.getvalue()
    return processed_data

# --- Streamlit App UI ---
st.set_page_config(layout="wide", page_title="Production Planning App")
st.title("üè≠ ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï")
st.markdown("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡∏∑‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏∞‡∏î‡∏±‡∏ö SKU ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")

# Initialize session state variables
if 'historical_df' not in st.session_state:
    st.session_state.historical_df = None
if 'category_targets' not in st.session_state:
    st.session_state.category_targets = None
if 'brand_targets_agg' not in st.session_state:
    st.session_state.brand_targets_agg = None
if 'predictions' not in st.session_state:
    st.session_state.predictions = None
if 'selected_period' not in st.session_state:
    st.session_state.selected_period = 'may'
if 'selected_brand' not in st.session_state:
    st.session_state.selected_brand = None
if 'show_all_skus' not in st.session_state:
    st.session_state.show_all_skus = False

tab1, tab2, tab3 = st.tabs(["1. üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "2. üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", "3. üìã ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"])

with tab1:
    st.header("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ù‡∏±‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    st.subheader("üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏ù‡∏±‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)")
    st.session_state.historical_df = display_embedded_data_summary()
    
    st.divider()
    
    # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    st.subheader("üéØ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (Target Data)")
    st.markdown("""
    **‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå BNI Sales Rolling:**
    - ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1: Headers (Sale volume, OP, Rolling)
    - ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2: Sub-headers (May, W1, W2, W3, W4)  
    - ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 3+: Categories ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ MFG)
    - ‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: Total
    """)
    
    target_file_upload = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", 
        type=['xlsx', 'xls'], 
        key="target_uploader",
        help="‡πÑ‡∏ü‡∏•‡πå BNI Sales Rolling ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ MFG"
    )
    
    if target_file_upload:
        st.session_state.category_targets = process_target_file(target_file_upload)
        if st.session_state.category_targets:
            st.success(f"‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ '{target_file_upload.name}' ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            # ‡∏ó‡∏≥ mapping ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
            _, st.session_state.brand_targets_agg = map_categories_to_historical_brands(
                st.session_state.category_targets, 
                st.session_state.historical_df
            )

    st.divider()
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU
    generate_disabled = not (st.session_state.historical_df is not None and st.session_state.category_targets is not None)
    
    if st.button(
        "üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU (Generate SKU Distribution)", 
        disabled=generate_disabled,
        type="primary"
    ):
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå..."):
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                if st.session_state.category_targets is None:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• category_targets")
                    st.stop()
                
                if st.session_state.historical_df is None:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• historical_df")
                    st.stop()
                
                st.write(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô categories: {len(st.session_state.category_targets)}")
                st.write(f"üìà ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á: {len(st.session_state.historical_df)}")
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á brand mapping (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥)
                if st.session_state.brand_targets_agg is None:
                    st.write("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á brand mapping...")
                    _, st.session_state.brand_targets_agg = map_categories_to_historical_brands(
                        st.session_state.category_targets, 
                        st.session_state.historical_df
                    )

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á brand mapping
                if not st.session_state.brand_targets_agg:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á brand targets ‡πÑ‡∏î‡πâ - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                    st.write("**‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:**")
                    st.write("1. ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ categories ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô MFG")
                    st.write("2. ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà categories ‡∏Å‡∏±‡∏ö brands ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    st.write("3. ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    st.stop()
                
                st.write(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á brand targets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(st.session_state.brand_targets_agg)} brands")
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
                st.write("üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå...")
                st.session_state.predictions, _ = predict_sku_distribution(
                    st.session_state.brand_targets_agg, 
                    st.session_state.historical_df
                )
                
                if st.session_state.predictions:
                    st.success("üéâ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå'")
                    st.session_state.selected_brand = next(iter(st.session_state.predictions), None)
                    st.balloons()
                else:
                    st.warning("‚ö†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
                    
            except Exception as e:
                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {e}")
                import traceback
                st.error(f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {traceback.format_exc()}")
                st.write("**‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:**")
                st.write("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                st.write("2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                st.write("3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ categories MFG")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if st.session_state.historical_df is not None and st.session_state.category_targets is not None:
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á", f"{len(st.session_state.historical_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        with col2:
            st.metric("üéØ Categories", f"{len(st.session_state.category_targets)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        with col3:
            ready_status = "‡∏û‡∏£‡πâ‡∏≠‡∏°" if st.session_state.brand_targets_agg else "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°"
            st.metric("üöÄ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ready_status)

# Common functions
def create_period_selector(widget_key):
    period_options = {'may': 'May üìÖ', 'w1': 'Week 1 üìÜ'}
    period_keys = list(period_options.keys())
    try:
        current_period_index = period_keys.index(st.session_state.selected_period)
    except ValueError:
        current_period_index = 0
        st.session_state.selected_period = period_keys[0]
    
    st.session_state.selected_period = st.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (Select Period):",
        options=period_keys,
        format_func=lambda x: period_options[x],
        horizontal=True,
        index=current_period_index,
        key=widget_key
    )
    return period_options[st.session_state.selected_period]

def create_brand_selector(widget_key):
    if not st.session_state.predictions:
        return None
        
    brand_list = list(st.session_state.predictions.keys())
    if not brand_list:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡πÉ‡∏î‡πÜ")
        return None

    if st.session_state.selected_brand not in brand_list:
         st.session_state.selected_brand = brand_list[0] if brand_list else None
    
    try:
        current_brand_index = brand_list.index(st.session_state.selected_brand) if st.session_state.selected_brand else 0
    except ValueError:
        current_brand_index = 0
        st.session_state.selected_brand = brand_list[0] if brand_list else None

    st.session_state.selected_brand = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå (Select Brand):", 
        options=brand_list,
        index=current_brand_index,
        key=widget_key
    )
    return st.session_state.selected_brand

with tab2:
    st.header("üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    if not st.session_state.predictions:
        st.info("üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' ‡∏Å‡πà‡∏≠‡∏ô")
    else:
        # Executive Summary
        create_executive_summary(st.session_state.brand_targets_agg, st.session_state.predictions)
        
        st.divider()
        
        selected_period_name = create_period_selector("analysis_period_selector")
        
        st.subheader("üìà ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå (Brand Target Distribution)")
        if st.session_state.brand_targets_agg:
            brand_target_data = []
            target_key = 'mayTarget' if st.session_state.selected_period == 'may' else 'w1Target'
            for brand, targets in st.session_state.brand_targets_agg.items():
                if targets[target_key] > 0:
                    brand_target_data.append({'Brand': brand, 'Tonnage': targets[target_key]})
            
            if brand_target_data:
                df_brand_targets = pd.DataFrame(brand_target_data)
                fig_brand_targets = px.bar(
                    df_brand_targets, 
                    x='Brand', 
                    y='Tonnage', 
                    title=f"Brand Targets for {selected_period_name}",
                    labels={'Tonnage':'‡∏ï‡∏±‡∏ô (Tons)'},
                    color='Tonnage',
                    color_continuous_scale='Blues'
                )
                st.plotly_chart(fig_brand_targets, use_container_width=True)

        st.divider()
        st.subheader("üéØ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU (SKU Distribution)")
        
        col_brand_sel, col_toggle_sku = st.columns([3,1])
        with col_brand_sel:
            selected_brand = create_brand_selector("analysis_brand_selector")
        with col_toggle_sku:
             st.session_state.show_all_skus = st.checkbox("‡πÅ‡∏™‡∏î‡∏á SKU ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=st.session_state.show_all_skus, key="show_all_skus_toggle")

        if selected_brand:
            brand_data = st.session_state.predictions.get(selected_brand)
            dist_key = 'mayDistribution' if st.session_state.selected_period == 'may' else 'w1Distribution'
            sku_distribution = brand_data.get(dist_key)

            if sku_distribution:
                df_sku_dist = pd.DataFrame.from_dict(sku_distribution, orient='index').reset_index()
                df_sku_dist.rename(columns={
                    'index': 'SKU', 
                    'itemName': 'Product Name', 
                    'tonnage': 'Predicted Tonnage', 
                    'percentage': 'Percentage',
                    'historicalTonnage': 'Historical Tonnage'
                }, inplace=True)
                df_sku_dist = df_sku_dist.sort_values(by='Predicted Tonnage', ascending=False)
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Growth Ratio
                if 'Historical Tonnage' in df_sku_dist.columns:
                    df_sku_dist['Growth Ratio'] = (df_sku_dist['Predicted Tonnage'] / df_sku_dist['Historical Tonnage']).round(2)
                    df_sku_dist['Growth Ratio'] = df_sku_dist['Growth Ratio'].replace([float('inf')], 999.0)
                
                display_df_sku = df_sku_dist if st.session_state.show_all_skus else df_sku_dist.head(15)
                
                if not display_df_sku.empty:
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô SKU", len(df_sku_dist))
                    with col2:
                        total_target = df_sku_dist['Predicted Tonnage'].sum()
                        st.metric("‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{total_target:.1f} ‡∏ï‡∏±‡∏ô")
                    with col3:
                        total_historical = df_sku_dist['Historical Tonnage'].sum()
                        st.metric("‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°", f"{total_historical:.1f} ‡∏ï‡∏±‡∏ô")
                    with col4:
                        overall_growth = total_target / total_historical if total_historical > 0 else 0
                        st.metric("‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï", f"{overall_growth:.1f}x")
                    
                    # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á
                    fig_sku_bar = px.bar(
                        display_df_sku, 
                        y='SKU', 
                        x='Predicted Tonnage', 
                        orientation='h',
                        title=f"‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {selected_brand} ({selected_period_name})",
                        labels={'Predicted Tonnage':'‡∏ï‡∏±‡∏ô (Tons)'}, 
                        hover_data=['Product Name', 'Historical Tonnage', 'Growth Ratio'],
                        color='Growth Ratio',
                        color_continuous_scale='RdYlGn_r'
                    )
                    fig_sku_bar.update_layout(yaxis={'categoryorder':'total ascending'}, height=600)
                    st.plotly_chart(fig_sku_bar, use_container_width=True)

                    # ‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏° (Top 10)
                    top_n_pie = 8
                    df_pie_data = df_sku_dist.head(top_n_pie).copy()
                    if len(df_sku_dist) > top_n_pie:
                        others_tonnage = df_sku_dist.iloc[top_n_pie:]['Predicted Tonnage'].sum()
                        if others_tonnage > 0.01:
                            others_row = pd.DataFrame([{
                                'SKU': 'Others', 
                                'Product Name': f'‡∏≠‡∏∑‡πà‡∏ô‡πÜ ({len(df_sku_dist) - top_n_pie} SKU)', 
                                'Predicted Tonnage': others_tonnage, 
                                'Percentage': 0.0
                            }])
                            df_pie_data = pd.concat([df_pie_data, others_row], ignore_index=True)

                    fig_sku_pie = px.pie(
                        df_pie_data, 
                        values='Predicted Tonnage', 
                        names='SKU', 
                        title=f"‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô Top SKU ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {selected_brand} ({selected_period_name})", 
                        hover_data=['Product Name']
                    )
                    st.plotly_chart(fig_sku_pie, use_container_width=True)
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î SKU")
                    display_columns = ['SKU', 'Product Name', 'Predicted Tonnage', 'Historical Tonnage', 'Growth Ratio', 'Percentage']
                    display_table = display_df_sku[display_columns].copy()
                    display_table['Predicted Tonnage'] = display_table['Predicted Tonnage'].round(3)
                    display_table['Historical Tonnage'] = display_table['Historical Tonnage'].round(3)
                    display_table['Percentage'] = (display_table['Percentage'] * 100).round(2)
                    
                    st.dataframe(display_table, use_container_width=True)
            else:
                st.warning(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {selected_brand} ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á {selected_period_name}")

        st.divider()
        
        # AI Insights Analysis Section
        if st.session_state.brand_targets_agg and st.session_state.predictions:
            display_insights_section(
                st.session_state.brand_targets_agg, 
                st.session_state.predictions, 
                selected_brand
            )

with tab3:
    st.header("üìã ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï")
    if not st.session_state.predictions:
        st.info("üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ SKU ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' ‡∏Å‡πà‡∏≠‡∏ô")
    else:
        selected_period_name_results = create_period_selector("results_period_selector")
        selected_brand_res = create_brand_selector("results_brand_selector")

        if selected_brand_res:
            brand_data_res = st.session_state.predictions.get(selected_brand_res)
            dist_key_res = 'mayDistribution' if st.session_state.selected_period == 'may' else 'w1Distribution'
            sku_distribution_res = brand_data_res.get(dist_key_res)

            if sku_distribution_res:
                st.subheader(f"üìä ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï {selected_brand_res} - {selected_period_name_results}")
                
                df_results = pd.DataFrame.from_dict(sku_distribution_res, orient='index').reset_index()
                df_results.rename(columns={
                    'index': '‡∏£‡∏´‡∏±‡∏™ SKU', 
                    'itemName': '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', 
                    'tonnage': '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô)', 
                    'percentage': '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô (%)',
                    'historicalTonnage': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏ï‡∏±‡∏ô)'
                }, inplace=True)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Growth Ratio
                df_results['‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï'] = (df_results['‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô)'] / df_results['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏ï‡∏±‡∏ô)']).round(2)
                df_results['‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï'] = df_results['‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï'].replace([float('inf')], 999.0)
                
                # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                df_results['‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô (%)'] = (df_results['‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô (%)'] * 100).round(2)
                df_results['‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô)'] = df_results['‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô)'].round(3)
                df_results['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏ï‡∏±‡∏ô)'] = df_results['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏ï‡∏±‡∏ô)'].round(3)
                
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
                df_results = df_results.sort_values(by='‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô)', ascending=False)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{df_results['‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô)'].sum():.1f} ‡∏ï‡∏±‡∏ô")
                with col2:
                    st.metric("üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á", f"{df_results['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏ï‡∏±‡∏ô)'].sum():.1f} ‡∏ï‡∏±‡∏ô")
                with col3:
                    total_growth = df_results['‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô)'].sum() / df_results['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏ï‡∏±‡∏ô)'].sum()
                    st.metric("üìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏£‡∏ß‡∏°", f"{total_growth:.1f}x")
                with col4:
                    st.metric("üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô SKU", len(df_results))
                
                # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå
                filter_option = st.selectbox(
                    "‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:",
                    ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï > 1 ‡∏ï‡∏±‡∏ô", "‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï > 0.5 ‡∏ï‡∏±‡∏ô", "‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï > 3x", "Top 20 SKU"]
                )
                
                if filter_option == "‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï > 1 ‡∏ï‡∏±‡∏ô":
                    df_display = df_results[df_results['‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô)'] > 1]
                elif filter_option == "‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï > 0.5 ‡∏ï‡∏±‡∏ô":
                    df_display = df_results[df_results['‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô)'] > 0.5]
                elif filter_option == "‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï > 3x":
                    df_display = df_results[df_results['‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï'] > 3]
                elif filter_option == "Top 20 SKU":
                    df_display = df_results.head(20)
                else:
                    df_display = df_results
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                st.dataframe(
                    df_display[['‡∏£‡∏´‡∏±‡∏™ SKU', '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô)', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏ï‡∏±‡∏ô)', '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï', '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô (%)']],
                    use_container_width=True,
                    height=400
                )
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SKU ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏™‡∏π‡∏á
                high_growth_skus = df_results[df_results['‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï'] > 5]
                if len(high_growth_skus) > 0:
                    st.warning(f"‚ö†Ô∏è **‡∏û‡∏ö SKU ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ({len(high_growth_skus)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):**")
                    st.dataframe(
                        high_growth_skus[['‡∏£‡∏´‡∏±‡∏™ SKU', '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô)', '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï']].head(10),
                        use_container_width=True
                    )
            else:
                st.warning(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {selected_brand_res}")

        # ‡∏™‡πà‡∏ß‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel
        if st.session_state.predictions:
            st.divider()
            st.subheader("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
            
            col_download1, col_download2 = st.columns(2)
            
            with col_download1:
                excel_bytes = generate_excel_download(st.session_state.predictions, st.session_state.selected_period)
                st.download_button(
                    label="üìä ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô Excel",
                    data=excel_bytes,
                    file_name=f"production_plan_{st.session_state.selected_period}_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    type="primary"
                )
            
            with col_download2:
                st.info("**‡πÑ‡∏ü‡∏•‡πå Excel ‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢:**\n"
                       "- Summary: ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å Brand\n"  
                       "- ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Brand: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î SKU ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö\n"
                       "- Growth Ratio: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ SKU")

# ‡πÄ‡∏û‡∏¥‡πà‡∏° footer
st.divider()
st.markdown("""
<div style='text-align: center; color: #666; padding: 20px;'>
    <p>üè≠ <strong>Production Planning App</strong> | 
    üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡∏∑‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï | 
    üéØ ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏∞‡∏î‡∏±‡∏ö SKU ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</p>
</div>
""", unsafe_allow_html=True)
